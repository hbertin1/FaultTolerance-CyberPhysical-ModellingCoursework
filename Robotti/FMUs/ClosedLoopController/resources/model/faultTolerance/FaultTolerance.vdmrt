class FaultTolerance

    types 
        Mode  = <INIT> | <ERROR_DETECTION> | <DAMAGE_CONFINEMENT> | <ERROR_RECOVERY> | <FAULT_TREATMENT>
    
    instance variables
        public static errorDetection : [ErrorDetection] := nil;
        public static damageConfinement : [DamageConfinement] := nil;
        public static errorRecovery : [ErrorRecovery] := nil;
        -- add fault treatment ?
        public static mode : Mode := <INIT>;
        public static last_pos : seq of real :=  [0.0, 0.0, 0.0, 0.0];

    operations
        public FaultTolerance :  seq of real * ErrorDetection ==> FaultTolerance
        FaultTolerance(pos, errorDetect) == (
            last_pos := pos;
            mode := <ERROR_DETECTION>;
            errorDetection := errorDetect;
        );

        public step : seq of real ==> ()
        step(pos) == (
            if mode = <INIT> then mode := <ERROR_DETECTION> -- maybe add init time
            else if mode = <ERROR_DETECTION> then (
                if errorDetection.detect(pos) then mode := <DAMAGE_CONFINEMENT>;
            );
            if mode = <DAMAGE_CONFINEMENT> then (
                if damageConfinement.confine(pos) then mode := <ERROR_RECOVERY>;
            );
            if mode = <ERROR_RECOVERY> then (
                if errorRecovery.recover(pos) then mode := <ERROR_DETECTION>;
            );
        );

end FaultTolerance