class FaultTolerance

    types 
        Mode  = <INIT> | <ERROR_DETECTION> | <DAMAGE_CONFINEMENT> | <ERROR_RECOVERY> | <FAULT_TREATMENT>;
       
    
    instance variables
        public static errorDetection : [ErrorDetection] := nil;
        -- public static damageConfinement : [DamageConfinement] := nil;
        -- public static errorRecovery : [ErrorRecovery] := nil;
        -- add fault treatment ?
        -- test
        public static mode : Mode := <INIT>;
        public static last_pos : seq of real :=  [0.0, 0.0, 0.0, 0.0];

    operations
        public FaultTolerance :  () ==> FaultTolerance
        FaultTolerance() == (
            mode := <INIT>;
            errorDetection := new ErrorDetection(last_pos);
            -- damageConfinement := new DamageConfinement(last_pos);
            -- errorRecovery := new ErrorRecovery(last_pos);
        );

        public check : seq of real ==> bool
        check(pos) == (
            dcl ret : bool := false;
            if mode = <INIT> then mode := <ERROR_DETECTION> -- maybe add init time
            else if mode = <ERROR_DETECTION> then (
                mode := <ERROR_DETECTION>;
                if errorDetection.detect(pos).isDetected() then mode := <DAMAGE_CONFINEMENT>;
            );
            -- if mode = <DAMAGE_CONFINEMENT> then (
            --     if damageConfinement.confine(pos) then mode := <ERROR_RECOVERY>;
            --     ret := true;
            -- );
            -- if mode = <ERROR_RECOVERY> then (
            --     if errorRecovery.recover(pos) then mode := <ERROR_DETECTION>;
            --     ret := true;
            -- );
            return ret;
        );

end FaultTolerance